{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "execution_state": "idle",
   "id": "11178f03-48a0-4366-bf54-be52ea4033f2",
   "metadata": {},
   "outputs": [],
   "source": [
    "!pip install pandas --upgrade "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "execution_state": "idle",
   "id": "4d3ddfd0-3a95-4345-94d4-adad4fde64ab",
   "metadata": {},
   "outputs": [],
   "source": [
    "!pip install numpy --upgrade"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "execution_state": "idle",
   "id": "96f68ce7-05af-4c34-beb1-36032ee6fe22",
   "metadata": {},
   "outputs": [],
   "source": [
    "!pip install matplotlib --upgrade"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "execution_state": "idle",
   "id": "294d5ac3-3780-4b60-aebb-0cb9e6a38cd9",
   "metadata": {},
   "outputs": [],
   "source": [
    "!pip install seaborn --upgrade"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "execution_state": "idle",
   "id": "4c47a305-e1e8-448c-9ea7-99265607760a",
   "metadata": {},
   "outputs": [],
   "source": [
    "!pip install scikit-learn --upgrade"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "execution_state": "idle",
   "id": "bcdb1dcd-49b5-42e4-a1bb-5f882b82b641",
   "metadata": {},
   "outputs": [],
   "source": [
    "!pip install tqdm --upgrade"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "execution_state": "idle",
   "id": "2975ee54-939a-443f-9e1f-e9e296c07f54",
   "metadata": {},
   "outputs": [],
   "source": [
    "!pip install peft"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "execution_state": "idle",
   "id": "5ded0785-ca28-4b44-8d67-2d9c41519ff9",
   "metadata": {},
   "outputs": [],
   "source": [
    "!pip install torch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "execution_state": "idle",
   "id": "b0984f22-6064-499a-b8f5-0f7b5568d99e",
   "metadata": {},
   "outputs": [],
   "source": [
    "!pip install transformers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "execution_state": "idle",
   "id": "1d0cbfe7-d177-4440-b914-257701f736f6",
   "metadata": {},
   "outputs": [],
   "source": [
    "!pip install optimum"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "execution_state": "idle",
   "id": "9c149573-f141-4cd5-b3d3-49bfda7781f8",
   "metadata": {},
   "outputs": [],
   "source": [
    "!pip install transformers torch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dacb4489-aa18-47a0-adf2-7a80951ff807",
   "metadata": {},
   "source": [
    "### 1. Identify the task and labeled datset\n",
    "- Choose a supervised learning task such as text classification, summarization, question answering, or instruction following, preferably within a specific domain (e.g., legal, medical, finance, science, etc.).\n",
    "\n",
    "- Select a labeled dataset appropriate for your task â€” one that includes both inputs and target outputs (e.g., prompts and responses, questions and answers, or documents and labels).\n",
    "\n",
    "- Make sure the dataset is:\n",
    "* Relevant to your chosen domain and task\n",
    "\n",
    "* Small enough to fine-tune efficiently (especially with PEFT), but large enough to produce meaningful improvements\n",
    "\n",
    "* You may need to experiment with dataset size or sampling to find a good balance between training time and performance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "execution_state": "idle",
   "id": "b1f0247c-a7f9-4cb2-a268-f1206fd6b3b7",
   "metadata": {},
   "outputs": [],
   "source": [
    "import difflib\n",
    "import re\n",
    "import torch\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import sklearn\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import accuracy_score, f1_score, classification_report, confusion_matrix\n",
    "from tqdm import tqdm\n",
    "import transformers\n",
    "#import peft\n",
    "from transformers import AutoModelForCausalLM, AutoTokenizer #, pipeline\n",
    "#from peft import LoraConfig, get_peft_model\n",
    "from datasets import load_dataset, Dataset, DatasetDict\n",
    "import optimum"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "execution_state": "idle",
   "id": "1275db2a-90eb-484c-991b-5644b5905ada",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Disease</th>\n",
       "      <th>Symptom_1</th>\n",
       "      <th>Symptom_2</th>\n",
       "      <th>Symptom_3</th>\n",
       "      <th>Symptom_4</th>\n",
       "      <th>Symptom_5</th>\n",
       "      <th>Symptom_6</th>\n",
       "      <th>Symptom_7</th>\n",
       "      <th>Symptom_8</th>\n",
       "      <th>Symptom_9</th>\n",
       "      <th>Symptom_10</th>\n",
       "      <th>Symptom_11</th>\n",
       "      <th>Symptom_12</th>\n",
       "      <th>Symptom_13</th>\n",
       "      <th>Symptom_14</th>\n",
       "      <th>Symptom_15</th>\n",
       "      <th>Symptom_16</th>\n",
       "      <th>Symptom_17</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Fungal infection</td>\n",
       "      <td>itching</td>\n",
       "      <td>skin_rash</td>\n",
       "      <td>nodal_skin_eruptions</td>\n",
       "      <td>dischromic _patches</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Fungal infection</td>\n",
       "      <td>skin_rash</td>\n",
       "      <td>nodal_skin_eruptions</td>\n",
       "      <td>dischromic _patches</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Fungal infection</td>\n",
       "      <td>itching</td>\n",
       "      <td>nodal_skin_eruptions</td>\n",
       "      <td>dischromic _patches</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Fungal infection</td>\n",
       "      <td>itching</td>\n",
       "      <td>skin_rash</td>\n",
       "      <td>dischromic _patches</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Fungal infection</td>\n",
       "      <td>itching</td>\n",
       "      <td>skin_rash</td>\n",
       "      <td>nodal_skin_eruptions</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            Disease   Symptom_1              Symptom_2              Symptom_3  \\\n",
       "0  Fungal infection     itching              skin_rash   nodal_skin_eruptions   \n",
       "1  Fungal infection   skin_rash   nodal_skin_eruptions    dischromic _patches   \n",
       "2  Fungal infection     itching   nodal_skin_eruptions    dischromic _patches   \n",
       "3  Fungal infection     itching              skin_rash    dischromic _patches   \n",
       "4  Fungal infection     itching              skin_rash   nodal_skin_eruptions   \n",
       "\n",
       "              Symptom_4 Symptom_5 Symptom_6 Symptom_7 Symptom_8 Symptom_9  \\\n",
       "0   dischromic _patches       NaN       NaN       NaN       NaN       NaN   \n",
       "1                   NaN       NaN       NaN       NaN       NaN       NaN   \n",
       "2                   NaN       NaN       NaN       NaN       NaN       NaN   \n",
       "3                   NaN       NaN       NaN       NaN       NaN       NaN   \n",
       "4                   NaN       NaN       NaN       NaN       NaN       NaN   \n",
       "\n",
       "  Symptom_10 Symptom_11 Symptom_12 Symptom_13 Symptom_14 Symptom_15  \\\n",
       "0        NaN        NaN        NaN        NaN        NaN        NaN   \n",
       "1        NaN        NaN        NaN        NaN        NaN        NaN   \n",
       "2        NaN        NaN        NaN        NaN        NaN        NaN   \n",
       "3        NaN        NaN        NaN        NaN        NaN        NaN   \n",
       "4        NaN        NaN        NaN        NaN        NaN        NaN   \n",
       "\n",
       "  Symptom_16 Symptom_17  \n",
       "0        NaN        NaN  \n",
       "1        NaN        NaN  \n",
       "2        NaN        NaN  \n",
       "3        NaN        NaN  \n",
       "4        NaN        NaN  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv('dataset.csv')\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "52e8c971-c71e-4424-a7ee-1a56be1dfd36",
   "metadata": {},
   "source": [
    "### 2. Process Your Data\n",
    "- Clean and preprocess the dataset to be suitable for an SL.\n",
    "- Convert the dataset into a format compatible with your training pipeline. \n",
    "- Consider preprocessing your data to improve training quality."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "execution_state": "idle",
   "id": "626ab2e1-cc82-4356-a61c-77d0b06ea9d6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4920, 18)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "execution_state": "idle",
   "id": "45b7b912-ca68-409e-bfee-d65f72dd1ea2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Clean and standardize symptom columns\n",
    "symptom_cols = [col for col in df.columns if 'Symptom_' in col]\n",
    "\n",
    "# Create processed dataframe with only disease and symptoms\n",
    "processed_df = pd.DataFrame()\n",
    "processed_df['disease'] = df['Disease']\n",
    "\n",
    "# Create natural language symptom descriptions directly\n",
    "processed_df['symptoms'] = df[symptom_cols].apply(\n",
    "    lambda x: f\"Patient presents with: {'; '.join([str(s).replace('_', ' ').strip() for s in x.dropna().tolist()])}\", \n",
    "    axis=1\n",
    ")\n",
    "\n",
    "processed_df = processed_df.drop_duplicates(subset=['disease', 'symptoms'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "execution_state": "idle",
   "id": "51e92d82-a5e7-46d8-8b03-7d40fed32363",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>disease</th>\n",
       "      <th>symptoms</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Fungal infection</td>\n",
       "      <td>Patient presents with: itching; skin rash; nod...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Fungal infection</td>\n",
       "      <td>Patient presents with: skin rash; nodal skin e...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Fungal infection</td>\n",
       "      <td>Patient presents with: itching; nodal skin eru...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Fungal infection</td>\n",
       "      <td>Patient presents with: itching; skin rash; dis...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Fungal infection</td>\n",
       "      <td>Patient presents with: itching; skin rash; nod...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            disease                                           symptoms\n",
       "0  Fungal infection  Patient presents with: itching; skin rash; nod...\n",
       "1  Fungal infection  Patient presents with: skin rash; nodal skin e...\n",
       "2  Fungal infection  Patient presents with: itching; nodal skin eru...\n",
       "3  Fungal infection  Patient presents with: itching; skin rash; dis...\n",
       "4  Fungal infection  Patient presents with: itching; skin rash; nod..."
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "processed_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "execution_state": "idle",
   "id": "f8f35d9e-02be-4096-bc7b-8e007103f96a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "disease     0\n",
      "symptoms    0\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(processed_df.isnull().sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "execution_state": "idle",
   "id": "bd6a45c9-3e51-4eed-b873-5d408056050f",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Label mapping examples:\n",
      "0: Fungal infection\n",
      "1: Allergy\n",
      "2: GERD\n",
      "3: Chronic cholestasis\n",
      "4: Drug Reaction\n",
      "5: Peptic ulcer diseae\n",
      "6: AIDS\n",
      "7: Diabetes \n",
      "8: Gastroenteritis\n",
      "9: Bronchial Asthma\n",
      "10: Hypertension \n",
      "11: Migraine\n",
      "12: Cervical spondylosis\n",
      "13: Paralysis (brain hemorrhage)\n",
      "14: Jaundice\n",
      "15: Malaria\n",
      "16: Chicken pox\n",
      "17: Dengue\n",
      "18: Typhoid\n",
      "19: hepatitis A\n",
      "20: Hepatitis B\n",
      "21: Hepatitis C\n",
      "22: Hepatitis D\n",
      "23: Hepatitis E\n",
      "24: Alcoholic hepatitis\n",
      "25: Tuberculosis\n",
      "26: Common Cold\n",
      "27: Pneumonia\n",
      "28: Dimorphic hemmorhoids(piles)\n",
      "29: Heart attack\n",
      "30: Varicose veins\n",
      "31: Hypothyroidism\n",
      "32: Hyperthyroidism\n",
      "33: Hypoglycemia\n",
      "34: Osteoarthristis\n",
      "35: Arthritis\n",
      "36: (vertigo) Paroymsal  Positional Vertigo\n",
      "37: Acne\n",
      "38: Urinary tract infection\n",
      "39: Psoriasis\n",
      "40: Impetigo\n",
      "\n",
      "Total diseases mapped: 41\n",
      "\n",
      "Sample data with labels:\n",
      "            disease                                           symptoms  label\n",
      "0  Fungal infection  Patient presents with: itching; skin rash; nod...      0\n",
      "1  Fungal infection  Patient presents with: skin rash; nodal skin e...      0\n",
      "2  Fungal infection  Patient presents with: itching; nodal skin eru...      0\n",
      "3  Fungal infection  Patient presents with: itching; skin rash; dis...      0\n",
      "4  Fungal infection  Patient presents with: itching; skin rash; nod...      0\n"
     ]
    }
   ],
   "source": [
    "# Get unique diseases in the order they first appear in the dataset\n",
    "unique_diseases = processed_df['disease'].unique()\n",
    "\n",
    "# Create mapping dictionary preserving original order\n",
    "label_mapping = {disease: idx for idx, disease in enumerate(unique_diseases)}\n",
    "\n",
    "# Add the numeric labels to processed_df\n",
    "processed_df['label'] = processed_df['disease'].map(label_mapping)\n",
    "\n",
    "# Create reverse mapping\n",
    "idx_to_disease = {idx: disease for disease, idx in label_mapping.items()}\n",
    "\n",
    "# Print the mapping to verify\n",
    "print(\"Label mapping examples:\")\n",
    "for i, (disease, idx) in enumerate(label_mapping.items()):\n",
    "    if i < 42:  # Print the first 10 \n",
    "        print(f\"{idx}: {disease}\")\n",
    "\n",
    "print(f\"\\nTotal diseases mapped: {len(label_mapping)}\")\n",
    "\n",
    "# Verify the mapping was applied correctly\n",
    "print(\"\\nSample data with labels:\")\n",
    "print(processed_df[['disease', 'symptoms', 'label']].head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "execution_state": "idle",
   "id": "28566969-76dd-4925-812a-96d9851017e4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training samples: 243\n",
      "Evaluation samples: 61\n"
     ]
    }
   ],
   "source": [
    "# Split into train and evaluation sets (80/20 split)\n",
    "train_df, val_df = train_test_split(\n",
    "    processed_df, \n",
    "    test_size=0.2, \n",
    "    random_state=42,\n",
    "    stratify=processed_df['disease']  # Ensure class balance\n",
    ")\n",
    "\n",
    "print(f\"Training samples: {len(train_df)}\")\n",
    "print(f\"Evaluation samples: {len(val_df)}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1443f3c5-af67-4c38-88be-eca7816454ea",
   "metadata": {},
   "source": [
    "# Define Prompt Format"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "execution_state": "idle",
   "id": "b91bc385-fca5-4bca-af82-34e336da4fab",
   "metadata": {},
   "outputs": [],
   "source": [
    "def build_improved_prompt(symptoms):\n",
    "    \"\"\"Build a simpler, more direct prompt for the OPT model\"\"\"\n",
    "    symptoms_text = symptoms.replace(\"Patient presents with: \", \"\")\n",
    "    \n",
    "    prompt = f\"\"\"Given these symptoms: {symptoms_text}\n",
    "    \n",
    "The disease is:\"\"\"\n",
    "    \n",
    "    return prompt"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "01bb1869-284c-4892-944d-f44abd84adb7",
   "metadata": {},
   "source": [
    "# Load Model and Tokenizer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "execution_state": "idle",
   "id": "3f6edd29-54af-4d11-a65f-333781ab8fe0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting numpy==1.24.3\n",
      "  Using cached numpy-1.24.3-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (5.6 kB)\n",
      "Using cached numpy-1.24.3-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (17.3 MB)\n",
      "Installing collected packages: numpy\n",
      "  Attempting uninstall: numpy\n",
      "    Found existing installation: numpy 1.24.3\n",
      "    Uninstalling numpy-1.24.3:\n",
      "      Successfully uninstalled numpy-1.24.3\n",
      "\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n",
      "autogluon-multimodal 1.2 requires nvidia-ml-py3==7.352.0, which is not installed.\n",
      "autogluon-common 1.2 requires numpy<2.1.4,>=1.25.0, but you have numpy 1.24.3 which is incompatible.\n",
      "autogluon-core 1.2 requires numpy<2.1.4,>=1.25.0, but you have numpy 1.24.3 which is incompatible.\n",
      "autogluon-core 1.2 requires scikit-learn<1.5.3,>=1.4.0, but you have scikit-learn 1.6.1 which is incompatible.\n",
      "autogluon-features 1.2 requires numpy<2.1.4,>=1.25.0, but you have numpy 1.24.3 which is incompatible.\n",
      "autogluon-features 1.2 requires scikit-learn<1.5.3,>=1.4.0, but you have scikit-learn 1.6.1 which is incompatible.\n",
      "autogluon-multimodal 1.2 requires jsonschema<4.22,>=4.18, but you have jsonschema 4.23.0 which is incompatible.\n",
      "autogluon-multimodal 1.2 requires nltk<3.9,>=3.4.5, but you have nltk 3.9.1 which is incompatible.\n",
      "autogluon-multimodal 1.2 requires numpy<2.1.4,>=1.25.0, but you have numpy 1.24.3 which is incompatible.\n",
      "autogluon-multimodal 1.2 requires omegaconf<2.3.0,>=2.1.1, but you have omegaconf 2.3.0 which is incompatible.\n",
      "autogluon-multimodal 1.2 requires scikit-learn<1.5.3,>=1.4.0, but you have scikit-learn 1.6.1 which is incompatible.\n",
      "autogluon-multimodal 1.2 requires torch<2.6,>=2.2, but you have torch 2.6.0+cu118 which is incompatible.\n",
      "autogluon-multimodal 1.2 requires torchvision<0.21.0,>=0.16.0, but you have torchvision 0.21.0+cu118 which is incompatible.\n",
      "autogluon-timeseries 1.2 requires numpy<2.1.4,>=1.25.0, but you have numpy 1.24.3 which is incompatible.\n",
      "autogluon-timeseries 1.2 requires torch<2.6,>=2.2, but you have torch 2.6.0+cu118 which is incompatible.\n",
      "autogluon-tabular 1.2 requires numpy<2.1.4,>=1.25.0, but you have numpy 1.24.3 which is incompatible.\n",
      "autogluon-tabular 1.2 requires scikit-learn<1.5.3,>=1.4.0, but you have scikit-learn 1.6.1 which is incompatible.\n",
      "blis 1.0.1 requires numpy<3.0.0,>=2.0.0, but you have numpy 1.24.3 which is incompatible.\n",
      "langchain-community 0.3.19 requires numpy<3,>=1.26.2, but you have numpy 1.24.3 which is incompatible.\n",
      "sparkmagic 0.21.0 requires pandas<2.0.0,>=0.17.1, but you have pandas 2.2.3 which is incompatible.\u001b[0m\u001b[31m\n",
      "\u001b[0mSuccessfully installed numpy-1.24.3\n"
     ]
    }
   ],
   "source": [
    "!pip install numpy==1.24.3 --force-reinstall"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "execution_state": "idle",
   "id": "1cf40d59-20ab-41c9-bd32-4199df235e23",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loading tokenizer...\n",
      "Loading model with GPU-only setup...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-04-21 22:08:59.456207: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:485] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "2025-04-21 22:08:59.472425: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:8454] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "2025-04-21 22:08:59.477551: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1452] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n",
      "2025-04-21 22:08:59.489507: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.\n",
      "To enable the following instructions: SSE4.1 SSE4.2 AVX AVX2 FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model loaded successfully!\n"
     ]
    }
   ],
   "source": [
    "# Define model name\n",
    "model_name = \"facebook/opt-1.3b\"\n",
    "\n",
    "# Load tokenizer\n",
    "print(\"Loading tokenizer...\")\n",
    "tokenizer = AutoTokenizer.from_pretrained(model_name)\n",
    "\n",
    "if model_name == \"facebook/opt-1.3b\":\n",
    "    tokenizer.padding_side = 'left'\n",
    "\n",
    "print(\"Loading model with GPU-only setup...\")\n",
    "model = AutoModelForCausalLM.from_pretrained(\n",
    "    model_name,\n",
    "    device_map=\"cuda\",  # Use available GPUs\n",
    "    torch_dtype=torch.float16  # Use half precision to save memory\n",
    ")\n",
    "\n",
    "print(\"Model loaded successfully!\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "71413677-adc8-4b16-b6c2-52ae31048f28",
   "metadata": {},
   "source": [
    "### 3. Baseline Measurement\n",
    "* Before fine-tuning, evaluate the performance of a pretrained autoregressive language model on your supervised task.\n",
    "\n",
    "* Use your labeled dataset in its original input-output format (e.g., prompt â†’ response, input â†’ label).\n",
    "\n",
    "* Measure how well the model performs without fine-tuning, using metrics appropriate for your task:\n",
    "\n",
    "* Accuracy, F1-score for classification\n",
    "\n",
    "* BLEU, ROUGE, or exact match for generation or QA\n",
    "\n",
    "\n",
    "* This will serve as your baseline for comparing performance after PEFT fine-tuning."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "execution_state": "idle",
   "id": "e3da3783-ab09-4aa0-978f-ef7bad3ea3c8",
   "metadata": {},
   "outputs": [],
   "source": [
    "def extract_disease_prediction(output, prompt):\n",
    "    \"\"\"Extract disease prediction with fuzzy matching capabilities\"\"\"\n",
    "    # Get only the generated text (anything after the prompt)\n",
    "    response = output[len(prompt):].strip()\n",
    "    \n",
    "    # If there's nothing meaningful, return empty string\n",
    "    if not response or response.isspace():\n",
    "        return \"\"\n",
    "    \n",
    "    # Try direct matching with any disease name\n",
    "    for disease in unique_diseases:\n",
    "        if disease.lower() in response.lower():\n",
    "            return disease\n",
    "    \n",
    "    # Try fuzzy matching for close matches\n",
    "    best_match = None\n",
    "    highest_similarity = 0\n",
    "    \n",
    "    for disease in unique_diseases:\n",
    "        # Calculate similarity between response and disease\n",
    "        similarity = difflib.SequenceMatcher(None, response.lower(), disease.lower()).ratio()\n",
    "        if similarity > highest_similarity and similarity > 0.7:  # Threshold\n",
    "            highest_similarity = similarity\n",
    "            best_match = disease\n",
    "    \n",
    "    if best_match:\n",
    "        return best_match\n",
    "    \n",
    "    # Get first sentence if no match\n",
    "    first_sentence = response.split('.')[0].strip()\n",
    "    \n",
    "    words = first_sentence.lower().split()\n",
    "    for disease in unique_diseases:\n",
    "        disease_lower = disease.lower()\n",
    "        for word in words:\n",
    "            if disease_lower.startswith(word) and len(word) > 3:  # Only meaningful words\n",
    "                return disease\n",
    "    \n",
    "    return \"\"  # Return empty if no match found"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "execution_state": "idle",
   "id": "55539df2-95b2-4612-a2b6-db1cdd2af26b",
   "metadata": {},
   "outputs": [],
   "source": [
    "def improved_batch_inference(model, prompts, batch_size=2):\n",
    "    results = []\n",
    "    \n",
    "    for i in tqdm(range(0, len(prompts), batch_size), desc=\"Running inference\"):\n",
    "        batch = prompts[i:i+batch_size]\n",
    "        inputs = tokenizer.batch_encode_plus(\n",
    "            batch, \n",
    "            return_tensors=\"pt\", \n",
    "            padding=True, \n",
    "            max_length=256,\n",
    "            truncation=True\n",
    "        ).to(\"cuda\")\n",
    "        \n",
    "        with torch.no_grad():\n",
    "            outputs = model.generate(\n",
    "                input_ids=inputs[\"input_ids\"],\n",
    "                attention_mask=inputs[\"attention_mask\"],\n",
    "                max_new_tokens=100,          # Significantly increased\n",
    "                num_beams=4,                 # Better beam search\n",
    "                temperature=0.2,             # Lower temperature for more focused output\n",
    "                do_sample=False,             # Disable sampling for more deterministic output\n",
    "                top_p=1.0,                   # Use full distribution\n",
    "                repetition_penalty=1.5,      # Strongly discourage repetition\n",
    "                length_penalty=1.0,          # Neutral length penalty\n",
    "                no_repeat_ngram_size=2,      # Avoid repeating bigrams\n",
    "                early_stopping=True,         # Stop when complete\n",
    "                pad_token_id=tokenizer.pad_token_id,\n",
    "                eos_token_id=tokenizer.eos_token_id\n",
    "            )\n",
    "        \n",
    "        decoded_outputs = tokenizer.batch_decode(outputs, skip_special_tokens=True)\n",
    "        \n",
    "        # Process predictions\n",
    "        for output, prompt in zip(decoded_outputs, batch):\n",
    "            prediction = extract_disease_prediction(output, prompt)\n",
    "            results.append(prediction)\n",
    "    \n",
    "    return results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "execution_state": "idle",
   "id": "b8e26f5c-278f-4992-bd4f-3eba1d6b6951",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Example improved prompt:\n",
      "Given these symptoms: itching; fatigue; lethargy; yellowish skin; dark urine; loss of appetite; abdominal pain; yellowing of eyes; malaise; receiving blood transfusion; receiving unsterile injections\n",
      "    \n",
      "The disease is:\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.11/site-packages/transformers/generation/configuration_utils.py:631: UserWarning: `do_sample` is set to `False`. However, `temperature` is set to `0.2` -- this flag is only used in sample-based generation modes. You should set `do_sample=True` or unset `temperature`.\n",
      "  warnings.warn(\n",
      "Running inference: 100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 31/31 [00:55<00:00,  1.80s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Valid predictions: 35 out of 61 (57.4%)\n",
      "\n",
      "Baseline Model Accuracy (on valid predictions): 0.2286\n",
      "Baseline Model Macro F1 Score (on valid predictions): 0.1790\n",
      "\n",
      "Sample predictions (first 10):\n",
      "------------------------------------------------------------\n",
      "Actual                         | Predicted                 | Match\n",
      "------------------------------------------------------------\n",
      "Hepatitis B                    |                           | âœ—\n",
      "Pneumonia                      | Hepatitis B               | âœ—\n",
      "Drug Reaction                  | Hepatitis B               | âœ—\n",
      "Allergy                        |                           | âœ—\n",
      "Pneumonia                      | Chronic cholestasis       | âœ—\n",
      "Hypothyroidism                 |                           | âœ—\n",
      "Typhoid                        | Typhoid                   | âœ“\n",
      "Fungal infection               |                           | âœ—\n",
      "Common Cold                    | Hepatitis B               | âœ—\n",
      "Hyperthyroidism                |                           | âœ—\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "def evaluate_baseline_model():\n",
    "    # Create improved prompts\n",
    "    improved_prompts = [build_improved_prompt(symptoms) for symptoms in val_df['symptoms']]\n",
    "    \n",
    "    # Print a sample prompt\n",
    "    print(\"\\nExample improved prompt:\")\n",
    "    print(improved_prompts[0])\n",
    "    \n",
    "    # Run inference with improved parameters\n",
    "    predictions = improved_batch_inference(model, improved_prompts)\n",
    "    \n",
    "    # Count valid predictions\n",
    "    valid_count = sum(1 for p in predictions if p)\n",
    "    print(f\"\\nValid predictions: {valid_count} out of {len(predictions)} ({valid_count/len(predictions)*100:.1f}%)\")\n",
    "    \n",
    "    # Handle empty predictions for accuracy calculation\n",
    "    filled_predictions = []\n",
    "    for p in predictions:\n",
    "        if not p:  # If prediction is empty\n",
    "            filled_predictions.append(\"Unknown\")  # Default value\n",
    "        else:\n",
    "            filled_predictions.append(p)\n",
    "    \n",
    "    # Calculate metrics (only on non-empty predictions)\n",
    "    non_empty_indices = [i for i, p in enumerate(predictions) if p]\n",
    "    if non_empty_indices:\n",
    "        filtered_actual = [val_df['disease'].iloc[i] for i in non_empty_indices]\n",
    "        filtered_pred = [predictions[i] for i in non_empty_indices]\n",
    "        \n",
    "        if filtered_pred:  # Only calculate if we have predictions\n",
    "            accuracy = accuracy_score(filtered_actual, filtered_pred)\n",
    "            f1 = f1_score(filtered_actual, filtered_pred, average=\"macro\", zero_division=0)\n",
    "            print(f\"\\nBaseline Model Accuracy (on valid predictions): {accuracy:.4f}\")\n",
    "            print(f\"Baseline Model Macro F1 Score (on valid predictions): {f1:.4f}\")\n",
    "    \n",
    "    # Sample predictions\n",
    "    print(\"\\nSample predictions (first 10):\")\n",
    "    print(\"-\" * 60)\n",
    "    print(f\"{'Actual':<30} | {'Predicted':<25} | {'Match'}\")\n",
    "    print(\"-\" * 60)\n",
    "    \n",
    "    for i in range(min(10, len(val_df))):\n",
    "        actual = val_df['disease'].iloc[i]\n",
    "        pred = predictions[i]\n",
    "        match = \"âœ“\" if actual == pred else \"âœ—\"\n",
    "        print(f\"{actual:<30} | {pred:<25} | {match}\")\n",
    "    \n",
    "    return predictions\n",
    "\n",
    "# Run the improved evaluation\n",
    "baseline_predictions = evaluate_baseline_model()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "28dbbcfa-b6b1-4a58-a1dd-f0ab2c0410da",
   "metadata": {},
   "source": [
    "## Define batch fuction "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9c73cbad-f476-4ae7-926f-c3fb06cb5de2",
   "metadata": {},
   "source": [
    "### 4. Fine-Tune a AR model using PEFT\n",
    "* Fine-tune a pretrained autoregressive language model on your domain-specific, labeled dataset using Parameter-Efficient Fine-Tuning (PEFT) with LoRA (Low-Rank Adaptation).\n",
    "\n",
    "* Use a PEFT framework such as the Hugging Face peft library to integrate LoRA into your training pipeline.\n",
    "\n",
    "* LoRA modifies only a small subset of the model's parameters, allowing for efficient training even on limited hardware.\n",
    "\n",
    "* Implement a training loop or use tools like Trainer or accelerate for easier setup.\n",
    "\n",
    "* After training, save the LoRA adapter weights for reuse or evaluation â€” you can later merge them with the base model if needed.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "execution_state": "idle",
   "id": "3c447e89-cb59-4733-bcde-48a9b5a1e046",
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import difflib\n",
    "from transformers import AutoModelForCausalLM, AutoTokenizer, Trainer, TrainingArguments\n",
    "from peft import LoraConfig, get_peft_model\n",
    "from datasets import Dataset\n",
    "from tqdm import tqdm\n",
    "from sklearn.metrics import accuracy_score, f1_score, classification_report"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "execution_state": "idle",
   "id": "bee80cf6-e7a3-4f13-b8ec-cf9516e1daac",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Ensure tokenizer is properly configured\n",
    "if tokenizer.pad_token is None:\n",
    "    tokenizer.pad_token = tokenizer.eos_token\n",
    "    tokenizer.pad_token_id = tokenizer.eos_token_id\n",
    "    print(f\"Pad token set to: {tokenizer.pad_token}\")\n",
    "    print(f\"Pad token ID: {tokenizer.pad_token_id}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "execution_state": "idle",
   "id": "b076351a-d76c-444c-9643-bfb5238cef15",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Enable gradient checkpointing to save memory\n",
    "model.gradient_checkpointing_enable()\n",
    "model.enable_input_require_grads()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "execution_state": "idle",
   "id": "3468fecb-3d55-48a3-a0d7-a35e5e80913e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Prepare training data\n",
    "train_inputs = []\n",
    "train_outputs = []\n",
    "for idx, row in train_df.iterrows():\n",
    "    train_inputs.append(build_improved_prompt(row['symptoms']))\n",
    "    train_outputs.append(row['disease'])\n",
    "\n",
    "# Create dataset\n",
    "train_dataset = Dataset.from_dict({\n",
    "    \"input_text\": train_inputs,\n",
    "    \"output_text\": train_outputs\n",
    "})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "execution_state": "idle",
   "id": "e4d1fa4b-2161-4e83-a053-961833460142",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define tokenization function\n",
    "def tokenize_function(examples):\n",
    "    # Create complete sequences with both input and expected output\n",
    "    complete_texts = []\n",
    "    for inp, out in zip(examples[\"input_text\"], examples[\"output_text\"]):\n",
    "        complete_texts.append(inp + out)\n",
    "    \n",
    "    # Tokenize complete sequences\n",
    "    tokenized = tokenizer(\n",
    "        complete_texts,\n",
    "        max_length=384,\n",
    "        padding=\"max_length\",\n",
    "        truncation=True,\n",
    "        return_tensors=None\n",
    "    )\n",
    "    \n",
    "    # Create proper labels for causal LM training\n",
    "    tokenized[\"labels\"] = [\n",
    "        [token if token != tokenizer.pad_token_id else -100 for token in ids] \n",
    "        for ids in tokenized[\"input_ids\"]\n",
    "    ]\n",
    "    \n",
    "    return tokenized"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "execution_state": "idle",
   "id": "d08b81a9-304b-4c90-bb9d-3119b6b86c6e",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Parameter 'function'=<function tokenize_function at 0x7f594de1b600> of the transform datasets.arrow_dataset.Dataset._map_single couldn't be hashed properly, a random hash was used instead. Make sure your transforms and parameters are serializable with pickle or dill for the dataset fingerprinting and caching to work. If you reuse this transform, the caching mechanism will consider it to be different from the previous calls and recompute everything. This warning is only showed once. Subsequent hashing failures won't be showed.\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "9e8b3a440e71498d84a261c14deb5e5f",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/31 [00:00<?, ?ba/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Apply tokenization\n",
    "tokenized_train_dataset = train_dataset.map(\n",
    "    tokenize_function,\n",
    "    batched=True,\n",
    "    batch_size=8,\n",
    "    remove_columns=train_dataset.column_names\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "execution_state": "idle",
   "id": "8f870ce8-7609-49e4-9d24-e3ff92ba95bd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Applying LoRA adapters to model...\n",
      "trainable params: 4,718,592 || all params: 1,320,476,672 || trainable%: 0.3573\n"
     ]
    }
   ],
   "source": [
    "# Apply LoRA configuration\n",
    "lora_config = LoraConfig(\n",
    "    r=16,  # Reduced rank\n",
    "    lora_alpha=32,  # Adjusted alpha\n",
    "    target_modules=[\"q_proj\", \"v_proj\", \"k_proj\", \"o_proj\", \"up_proj\", \"down_proj\", \"gate_proj\"],\n",
    "    lora_dropout=0.05,\n",
    "    bias=\"none\",\n",
    "    task_type=\"CAUSAL_LM\"\n",
    ")\n",
    "\n",
    "# Apply LoRA to your existing model\n",
    "print(\"Applying LoRA adapters to model...\")\n",
    "model_peft = get_peft_model(model, lora_config)\n",
    "model_peft.print_trainable_parameters()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "execution_state": "idle",
   "id": "ab1253bc-32b0-4592-a353-e5860fcd14ad",
   "metadata": {},
   "outputs": [],
   "source": [
    "training_args = TrainingArguments(\n",
    "    output_dir=\"./medical-diagnosis-lora-adapter\",\n",
    "    learning_rate=1e-4,            # Lower learning rate for stability\n",
    "    per_device_train_batch_size=1,\n",
    "    gradient_accumulation_steps=8,\n",
    "    num_train_epochs=30,           # More epochs for better learning\n",
    "    lr_scheduler_type=\"cosine\",    # Cosine schedule for smoother learning\n",
    "    gradient_checkpointing=True,\n",
    "    save_strategy=\"epoch\",\n",
    "    save_total_limit=3,            # Save only best 3 checkpoints\n",
    "    fp16=True,\n",
    "    warmup_ratio=0.1,              # Warmup for more stable training\n",
    "    weight_decay=0.01,             # Regularization\n",
    "    remove_unused_columns=False,   # Necessary for proper data handling\n",
    "    logging_steps=10,\n",
    "    report_to=\"tensorboard\"        # Monitor training\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "execution_state": "idle",
   "id": "86aecc09-84af-4345-ab85-841da06d77f1",
   "metadata": {},
   "outputs": [],
   "source": [
    "has_grad_params = False\n",
    "for param in model_peft.parameters():\n",
    "    if param.requires_grad:\n",
    "        has_grad_params = True\n",
    "        break\n",
    "\n",
    "if not has_grad_params:\n",
    "    print(\"Warning: No parameters require gradients! Forcing gradients...\")\n",
    "    model_peft.requires_grad_(True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "execution_state": "idle",
   "id": "cd687de0-2218-4598-84f7-8bf27003a6fb",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_25417/3132038175.py:2: FutureWarning: `tokenizer` is deprecated and will be removed in version 5.0.0 for `Trainer.__init__`. Use `processing_class` instead.\n",
      "  trainer = Trainer(\n",
      "/opt/conda/lib/python3.11/site-packages/accelerate/accelerator.py:494: FutureWarning: `torch.cuda.amp.GradScaler(args...)` is deprecated. Please use `torch.amp.GradScaler('cuda', args...)` instead.\n",
      "  self.scaler = torch.cuda.amp.GradScaler(**kwargs)\n",
      "No label_names provided for model class `PeftModelForCausalLM`. Since `PeftModel` hides base models input arguments, if label_names is not given, label_names can't be set automatically within `Trainer`. Note that empty label_names list will be used instead.\n",
      "`use_cache=True` is incompatible with gradient checkpointing. Setting `use_cache=False`.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "\n",
       "    <div>\n",
       "      \n",
       "      <progress value='900' max='900' style='width:300px; height:20px; vertical-align: middle;'></progress>\n",
       "      [900/900 14:34, Epoch 29/30]\n",
       "    </div>\n",
       "    <table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       " <tr style=\"text-align: left;\">\n",
       "      <th>Step</th>\n",
       "      <th>Training Loss</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>10</td>\n",
       "      <td>3.729800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>20</td>\n",
       "      <td>3.586300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>30</td>\n",
       "      <td>3.213900</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>40</td>\n",
       "      <td>2.921400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>50</td>\n",
       "      <td>2.306200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>60</td>\n",
       "      <td>1.840300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>70</td>\n",
       "      <td>1.547700</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>80</td>\n",
       "      <td>1.506600</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>90</td>\n",
       "      <td>1.335000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>100</td>\n",
       "      <td>1.253100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>110</td>\n",
       "      <td>1.186300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>120</td>\n",
       "      <td>1.178300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>130</td>\n",
       "      <td>1.046600</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>140</td>\n",
       "      <td>1.045800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>150</td>\n",
       "      <td>0.992400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>160</td>\n",
       "      <td>0.903000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>170</td>\n",
       "      <td>0.916500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>180</td>\n",
       "      <td>0.854800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>190</td>\n",
       "      <td>0.851500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>200</td>\n",
       "      <td>0.812300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>210</td>\n",
       "      <td>0.750700</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>220</td>\n",
       "      <td>0.708300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>230</td>\n",
       "      <td>0.687300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>240</td>\n",
       "      <td>0.676700</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>250</td>\n",
       "      <td>0.650400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>260</td>\n",
       "      <td>0.618400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>270</td>\n",
       "      <td>0.635000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>280</td>\n",
       "      <td>0.535700</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>290</td>\n",
       "      <td>0.572600</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>300</td>\n",
       "      <td>0.510100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>310</td>\n",
       "      <td>0.499600</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>320</td>\n",
       "      <td>0.488000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>330</td>\n",
       "      <td>0.493100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>340</td>\n",
       "      <td>0.470800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>350</td>\n",
       "      <td>0.454000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>360</td>\n",
       "      <td>0.412800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>370</td>\n",
       "      <td>0.437000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>380</td>\n",
       "      <td>0.398300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>390</td>\n",
       "      <td>0.412500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>400</td>\n",
       "      <td>0.387300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>410</td>\n",
       "      <td>0.418100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>420</td>\n",
       "      <td>0.366900</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>430</td>\n",
       "      <td>0.393500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>440</td>\n",
       "      <td>0.338600</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>450</td>\n",
       "      <td>0.347100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>460</td>\n",
       "      <td>0.359900</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>470</td>\n",
       "      <td>0.365600</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>480</td>\n",
       "      <td>0.323200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>490</td>\n",
       "      <td>0.312300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>500</td>\n",
       "      <td>0.341900</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>510</td>\n",
       "      <td>0.300900</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>520</td>\n",
       "      <td>0.313800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>530</td>\n",
       "      <td>0.326900</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>540</td>\n",
       "      <td>0.300100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>550</td>\n",
       "      <td>0.284800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>560</td>\n",
       "      <td>0.301200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>570</td>\n",
       "      <td>0.287700</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>580</td>\n",
       "      <td>0.286600</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>590</td>\n",
       "      <td>0.290700</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>600</td>\n",
       "      <td>0.292900</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>610</td>\n",
       "      <td>0.282100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>620</td>\n",
       "      <td>0.271100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>630</td>\n",
       "      <td>0.274900</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>640</td>\n",
       "      <td>0.283200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>650</td>\n",
       "      <td>0.265800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>660</td>\n",
       "      <td>0.279000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>670</td>\n",
       "      <td>0.261100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>680</td>\n",
       "      <td>0.262200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>690</td>\n",
       "      <td>0.265400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>700</td>\n",
       "      <td>0.266900</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>710</td>\n",
       "      <td>0.256900</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>720</td>\n",
       "      <td>0.299500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>730</td>\n",
       "      <td>0.254800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>740</td>\n",
       "      <td>0.256300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>750</td>\n",
       "      <td>0.244000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>760</td>\n",
       "      <td>0.247800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>770</td>\n",
       "      <td>0.258800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>780</td>\n",
       "      <td>0.255000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>790</td>\n",
       "      <td>0.243800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>800</td>\n",
       "      <td>0.255500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>810</td>\n",
       "      <td>0.256700</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>820</td>\n",
       "      <td>0.242600</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>830</td>\n",
       "      <td>0.247100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>840</td>\n",
       "      <td>0.268000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>850</td>\n",
       "      <td>0.247900</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>860</td>\n",
       "      <td>0.251200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>870</td>\n",
       "      <td>0.236900</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>880</td>\n",
       "      <td>0.244700</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>890</td>\n",
       "      <td>0.260000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>900</td>\n",
       "      <td>0.243200</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table><p>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "TrainOutput(global_step=900, training_loss=0.646243682967292, metrics={'train_runtime': 875.476, 'train_samples_per_second': 8.327, 'train_steps_per_second': 1.028, 'total_flos': 1.972219663613952e+16, 'train_loss': 0.646243682967292, 'epoch': 29.032921810699587})"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trainer = Trainer(\n",
    "    model=model_peft,\n",
    "    args=training_args,\n",
    "    train_dataset=tokenized_train_dataset,\n",
    "    tokenizer=tokenizer,\n",
    ")\n",
    "\n",
    "# Start training\n",
    "trainer.train()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "execution_state": "idle",
   "id": "9ad89fe3-9a9b-418a-a9db-e8f456da3d31",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "LoRA adapter weights and tokenizer saved successfully!\n"
     ]
    }
   ],
   "source": [
    "# Save the fine-tuned model and tokenizer\n",
    "model_peft.save_pretrained(\"./medical-diagnosis-lora-adapter\")\n",
    "tokenizer.save_pretrained(\"./medical-diagnosis-lora-adapter\")\n",
    "print(\"LoRA adapter weights and tokenizer saved successfully!\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "25de6794-86d4-4dff-9258-a35b6fdfd7c1",
   "metadata": {},
   "source": [
    "### 5. Remeasure the Fine-Tuned Model\n",
    "* Evaluate the performance of your fine-tuned autoregressive model (now updated using LoRA) on the same supervised task and dataset used for the baseline.\n",
    "\n",
    "* Use the same evaluation metric as before (e.g., accuracy, BLEU, ROUGE, or perplexity, depending on the task).\n",
    "\n",
    "* Compare the results with the baseline measurement to assess the impact of fine-tuning.\n",
    "\n",
    "* Analyze whether the model has improved in task performance, and consider potential areas for further tuning or data refinement."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "execution_state": "idle",
   "id": "0ddeb7a7-89a3-470c-a6d8-e9ee1acdbd82",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Improved prediction extraction function\n",
    "def extract_finetuned_prediction(output, prompt):\n",
    "    \"\"\"Modified extraction function for fine-tuned model\"\"\"\n",
    "    # Get only the generated text (anything after the prompt)\n",
    "    response = output[len(prompt):].strip()\n",
    "    \n",
    "    # Clean up the response - take first line or sentence\n",
    "    if '\\n' in response:\n",
    "        response = response.split('\\n')[0].strip()\n",
    "    if '.' in response:\n",
    "        response = response.split('.')[0].strip()\n",
    "    \n",
    "    # Direct matching with disease names\n",
    "    for disease in unique_diseases:\n",
    "        if disease.lower() in response.lower():\n",
    "            return disease\n",
    "    \n",
    "    # More aggressive fuzzy matching\n",
    "    best_match = None\n",
    "    highest_similarity = 0\n",
    "    \n",
    "    for disease in unique_diseases:\n",
    "        similarity = difflib.SequenceMatcher(None, response.lower(), disease.lower()).ratio()\n",
    "        if similarity > highest_similarity and similarity > 0.6:  # Lower threshold\n",
    "            highest_similarity = similarity\n",
    "            best_match = disease\n",
    "    \n",
    "    if best_match:\n",
    "        return best_match\n",
    "    \n",
    "    return \"\"  # Return empty if no match found"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "execution_state": "idle",
   "id": "c1c323a5-2e80-4f37-86bd-da891678eb4f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Improved inference function for the fine-tuned model\n",
    "def finetuned_batch_inference(model, prompts, batch_size=2):\n",
    "    results = []\n",
    "    \n",
    "    for i in tqdm(range(0, len(prompts), batch_size), desc=\"Running inference\"):\n",
    "        batch = prompts[i:i+batch_size]\n",
    "        inputs = tokenizer.batch_encode_plus(\n",
    "            batch, \n",
    "            return_tensors=\"pt\", \n",
    "            padding=True, \n",
    "            max_length=256,\n",
    "            truncation=True\n",
    "        ).to(\"cuda\")\n",
    "        \n",
    "        with torch.no_grad():\n",
    "            outputs = model.generate(\n",
    "                input_ids=inputs[\"input_ids\"],\n",
    "                attention_mask=inputs[\"attention_mask\"],\n",
    "                max_new_tokens=20,          # Shorter for disease names\n",
    "                num_beams=5,                # More beams for better accuracy\n",
    "                temperature=0.7,            # Higher temperature for more diversity\n",
    "                do_sample=True,             # Enable sampling\n",
    "                top_p=0.95,                 # Top-p sampling\n",
    "                repetition_penalty=1.2,     # Lighter repetition penalty\n",
    "                length_penalty=1.0,\n",
    "                early_stopping=True,\n",
    "                pad_token_id=tokenizer.pad_token_id,\n",
    "                eos_token_id=tokenizer.eos_token_id\n",
    "            )\n",
    "        \n",
    "        decoded_outputs = tokenizer.batch_decode(outputs, skip_special_tokens=True)\n",
    "        \n",
    "        # Process predictions with the modified extraction\n",
    "        for output, prompt in zip(decoded_outputs, batch):\n",
    "            prediction = extract_finetuned_prediction(output, prompt)\n",
    "            results.append(prediction)\n",
    "    \n",
    "    return results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "execution_state": "idle",
   "id": "3f328e34-b6c6-42cf-a064-66e05dbccd19",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fine-tuned model loaded successfully!\n"
     ]
    }
   ],
   "source": [
    "# Load the fine-tuned model properly\n",
    "from peft import PeftModel, PeftConfig\n",
    "\n",
    "# Load the configuration\n",
    "peft_config = PeftConfig.from_pretrained(\"./medical-diagnosis-lora-adapter\")\n",
    "\n",
    "# Load a fresh base model\n",
    "base_model = AutoModelForCausalLM.from_pretrained(\n",
    "    model_name,  # Make sure this is the same model used during training\n",
    "    device_map=\"cuda\",\n",
    "    torch_dtype=torch.float16\n",
    ")\n",
    "\n",
    "# Load the LoRA adapter onto the fresh base model\n",
    "model_finetuned = PeftModel.from_pretrained(\n",
    "    base_model,\n",
    "    \"./medical-diagnosis-lora-adapter\",\n",
    "    torch_dtype=torch.float16\n",
    ")\n",
    "\n",
    "# Set to evaluation mode\n",
    "model_finetuned.eval()\n",
    "print(\"Fine-tuned model loaded successfully!\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "execution_state": "idle",
   "id": "0993139b-2e0d-452d-96da-d28be53ffc01",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Running inference with fine-tuned model...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Running inference: 100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 31/31 [00:17<00:00,  1.74it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fine-tuned Model Accuracy: 0.9016\n",
      "Fine-tuned Model Macro F1 Score: 0.8764\n",
      "\n",
      "Classification Report for Fine-tuned Model:\n",
      "                                         precision    recall  f1-score   support\n",
      "\n",
      "(vertigo) Paroymsal  Positional Vertigo       0.00      0.00      0.00         1\n",
      "                                   AIDS       0.00      0.00      0.00         1\n",
      "                                   Acne       1.00      1.00      1.00         1\n",
      "                    Alcoholic hepatitis       0.00      0.00      0.00         2\n",
      "                                Allergy       1.00      1.00      1.00         1\n",
      "                              Arthritis       1.00      1.00      1.00         1\n",
      "                       Bronchial Asthma       0.50      1.00      0.67         1\n",
      "                   Cervical spondylosis       1.00      1.00      1.00         1\n",
      "                            Chicken pox       1.00      1.00      1.00         2\n",
      "                    Chronic cholestasis       1.00      0.50      0.67         2\n",
      "                            Common Cold       1.00      0.50      0.67         2\n",
      "                                 Dengue       1.00      1.00      1.00         2\n",
      "                              Diabetes        1.00      1.00      1.00         2\n",
      "           Dimorphic hemmorhoids(piles)       1.00      1.00      1.00         1\n",
      "                          Drug Reaction       1.00      1.00      1.00         1\n",
      "                       Fungal infection       1.00      1.00      1.00         1\n",
      "                                   GERD       1.00      1.00      1.00         1\n",
      "                        Gastroenteritis       1.00      1.00      1.00         1\n",
      "                           Heart attack       1.00      1.00      1.00         1\n",
      "                            Hepatitis B       0.67      1.00      0.80         2\n",
      "                            Hepatitis C       1.00      1.00      1.00         1\n",
      "                            Hepatitis D       1.00      1.00      1.00         2\n",
      "                            Hepatitis E       1.00      1.00      1.00         2\n",
      "                          Hypertension        0.50      1.00      0.67         1\n",
      "                        Hyperthyroidism       1.00      1.00      1.00         2\n",
      "                           Hypoglycemia       1.00      1.00      1.00         2\n",
      "                         Hypothyroidism       1.00      1.00      1.00         2\n",
      "                               Impetigo       1.00      1.00      1.00         1\n",
      "                               Jaundice       1.00      1.00      1.00         2\n",
      "                                Malaria       0.67      1.00      0.80         2\n",
      "                               Migraine       1.00      1.00      1.00         2\n",
      "                        Osteoarthristis       1.00      1.00      1.00         1\n",
      "           Paralysis (brain hemorrhage)       1.00      1.00      1.00         1\n",
      "                    Peptic ulcer diseae       1.00      1.00      1.00         1\n",
      "                              Pneumonia       1.00      1.00      1.00         2\n",
      "                              Psoriasis       1.00      1.00      1.00         1\n",
      "                           Tuberculosis       1.00      1.00      1.00         2\n",
      "                                Typhoid       1.00      1.00      1.00         2\n",
      "                Urinary tract infection       1.00      1.00      1.00         1\n",
      "                         Varicose veins       1.00      1.00      1.00         2\n",
      "                            hepatitis A       0.50      1.00      0.67         2\n",
      "\n",
      "                               accuracy                           0.90        61\n",
      "                              macro avg       0.87      0.90      0.88        61\n",
      "                           weighted avg       0.88      0.90      0.88        61\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "# Create validation prompts with the improved prompt function\n",
    "val_prompts = [build_improved_prompt(symptoms) for symptoms in val_df['symptoms']]\n",
    "\n",
    "# Run inference with fine-tuned model\n",
    "print(\"Running inference with fine-tuned model...\")\n",
    "finetuned_predictions = finetuned_batch_inference(model_finetuned, val_prompts)\n",
    "\n",
    "# Calculate metrics\n",
    "accuracy = accuracy_score(val_df['disease'], finetuned_predictions)\n",
    "f1 = f1_score(\n",
    "    val_df['disease'], \n",
    "    finetuned_predictions,\n",
    "    average=\"macro\",\n",
    "    zero_division=0\n",
    ")\n",
    "\n",
    "# Print simple results\n",
    "print(f\"Fine-tuned Model Accuracy: {accuracy:.4f}\")\n",
    "print(f\"Fine-tuned Model Macro F1 Score: {f1:.4f}\")\n",
    "\n",
    "# Generate classification report\n",
    "print(\"\\nClassification Report for Fine-tuned Model:\")\n",
    "print(classification_report(\n",
    "    val_df['disease'], \n",
    "    finetuned_predictions,\n",
    "    zero_division=0\n",
    "))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "546c7246-2713-49a8-878c-adab0350fc3d",
   "metadata": {},
   "source": [
    "### 7. Organize & Summarize Results\n",
    "- Present your results in a structured format.\n",
    "- Compare the performance of the pre-trained and fine-tuned models.\n",
    "- Discuss key takeaways from the fine-tuning process."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "execution_state": "idle",
   "id": "d2f7de7d-bec0-4289-9eea-9ff52125d454",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Comparison Summary:\n",
      "Baseline valid predictions: 35/61 (57.4%)\n",
      "Fine-tuned valid predictions: 61/61 (100.0%)\n",
      "\n",
      "Sample Comparison (first 10):\n",
      "--------------------------------------------------------------------------------\n",
      "Actual                    | Baseline                  | Fine-tuned               \n",
      "--------------------------------------------------------------------------------\n",
      "Hepatitis B               |                           | Hepatitis B              \n",
      "Pneumonia                 | Hepatitis B               | Pneumonia                \n",
      "Drug Reaction             | Hepatitis B               | Drug Reaction            \n",
      "Allergy                   |                           | Allergy                  \n",
      "Pneumonia                 | Chronic cholestasis       | Pneumonia                \n",
      "Hypothyroidism            |                           | Hypothyroidism           \n",
      "Typhoid                   | Typhoid                   | Typhoid                  \n",
      "Fungal infection          |                           | Fungal infection         \n",
      "Common Cold               | Hepatitis B               | Common Cold              \n",
      "Hyperthyroidism           |                           | Hyperthyroidism          \n"
     ]
    }
   ],
   "source": [
    "if 'baseline_predictions' in globals():\n",
    "    # Count valid predictions\n",
    "    valid_baseline = [p for p in baseline_predictions if p]\n",
    "    valid_finetuned = [p for p in finetuned_predictions if p]\n",
    "    \n",
    "    print(f\"\\nComparison Summary:\")\n",
    "    print(f\"Baseline valid predictions: {len(valid_baseline)}/{len(baseline_predictions)} ({len(valid_baseline)/len(baseline_predictions)*100:.1f}%)\")\n",
    "    print(f\"Fine-tuned valid predictions: {len(valid_finetuned)}/{len(finetuned_predictions)} ({len(valid_finetuned)/len(finetuned_predictions)*100:.1f}%)\")\n",
    "    \n",
    "    # Print side-by-side sample comparison\n",
    "    print(\"\\nSample Comparison (first 10):\")\n",
    "    print(\"-\" * 80)\n",
    "    print(f\"{'Actual':<25} | {'Baseline':<25} | {'Fine-tuned':<25}\")\n",
    "    print(\"-\" * 80)\n",
    "    \n",
    "    for i in range(min(10, len(val_df))):\n",
    "        actual = val_df['disease'].iloc[i]\n",
    "        baseline = baseline_predictions[i] if i < len(baseline_predictions) else \"\"\n",
    "        finetuned = finetuned_predictions[i] if i < len(finetuned_predictions) else \"\"\n",
    "        \n",
    "        print(f\"{actual:<25} | {baseline:<25} | {finetuned:<25}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "execution_state": "idle",
   "id": "e7eb166d-a7b5-48d9-953f-4849ed414db0",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.11/site-packages/gradio/blocks.py:1114: UserWarning: Cannot load huggingface. Caught Exception: 404 Client Error: Not Found for url: https://huggingface.co/api/spaces/huggingface (Request ID: Root=1-6806c7f4-766ea0ce059c837748a65486;ecf7f744-0f98-4208-a56a-ec91e13c4953)\n",
      "\n",
      "Sorry, we can't find the page you are looking for.\n",
      "  warnings.warn(f\"Cannot load {theme}. Caught Exception: {str(e)}\")\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "* Running on local URL:  http://127.0.0.1:7860\n",
      "* Running on public URL: https://4e06b369783c073109.gradio.live\n",
      "\n",
      "This share link expires in 1 week. For free permanent hosting and GPU upgrades, run `gradio deploy` from the terminal in the working directory to deploy to Hugging Face Spaces (https://huggingface.co/spaces)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div><iframe src=\"https://4e06b369783c073109.gradio.live\" width=\"100%\" height=\"500\" allow=\"autoplay; camera; microphone; clipboard-read; clipboard-write;\" frameborder=\"0\" allowfullscreen></iframe></div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": []
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import gradio as gr\n",
    "import torch\n",
    "from transformers import AutoModelForCausalLM, AutoTokenizer\n",
    "from peft import PeftModel\n",
    "import difflib\n",
    "\n",
    "# Load the model (same code we used for evaluation)\n",
    "model_name = \"facebook/opt-1.3b\"\n",
    "tokenizer = AutoTokenizer.from_pretrained(\"./medical-diagnosis-lora-adapter\")\n",
    "base_model = AutoModelForCausalLM.from_pretrained(\n",
    "    model_name,\n",
    "    device_map=\"cuda\",\n",
    "    torch_dtype=torch.float16\n",
    ")\n",
    "model = PeftModel.from_pretrained(\n",
    "    base_model,\n",
    "    \"./medical-diagnosis-lora-adapter\",\n",
    "    torch_dtype=torch.float16\n",
    ")\n",
    "model.eval()\n",
    "\n",
    "# Load diseases list\n",
    "unique_diseases = [\n",
    "    \"Fungal infection\", \"Allergy\", \"GERD\", \"Chronic cholestasis\", \"Drug Reaction\",\n",
    "    \"Peptic ulcer diseae\", \"AIDS\", \"Diabetes\", \"Gastroenteritis\", \"Bronchial Asthma\",\n",
    "    \"Hypertension\", \"Migraine\", \"Cervical spondylosis\", \"Paralysis (brain hemorrhage)\",\n",
    "    \"Jaundice\", \"Malaria\", \"Chicken pox\", \"Dengue\", \"Typhoid\", \"hepatitis A\",\n",
    "    \"Hepatitis B\", \"Hepatitis C\", \"Hepatitis D\", \"Hepatitis E\", \"Alcoholic hepatitis\",\n",
    "    \"Tuberculosis\", \"Common Cold\", \"Pneumonia\", \"Dimorphic hemmorhoids(piles)\",\n",
    "    \"Heart attack\", \"Varicose veins\", \"Hypothyroidism\", \"Hyperthyroidism\", \"Hypoglycemia\",\n",
    "    \"Osteoarthristis\", \"Arthritis\", \"(vertigo) Paroymsal Positional Vertigo\",\n",
    "    \"Acne\", \"Urinary tract infection\", \"Psoriasis\", \"Impetigo\"\n",
    "]\n",
    "\n",
    "def build_prompt(symptoms_text):\n",
    "    # Format the symptoms into the expected prompt format\n",
    "    return f\"Given these symptoms: {symptoms_text}\\n\\nThe disease is:\"\n",
    "\n",
    "def predict_disease(symptoms_text):\n",
    "    # Build prompt\n",
    "    prompt = build_prompt(symptoms_text)\n",
    "    \n",
    "    # Tokenize the input\n",
    "    inputs = tokenizer(prompt, return_tensors=\"pt\").to(\"cuda\")\n",
    "    \n",
    "    # Generate prediction\n",
    "    with torch.no_grad():\n",
    "        outputs = model.generate(\n",
    "            input_ids=inputs[\"input_ids\"],\n",
    "            attention_mask=inputs[\"attention_mask\"],\n",
    "            max_new_tokens=20,\n",
    "            num_beams=5,\n",
    "            temperature=0.7,\n",
    "            do_sample=True,\n",
    "            top_p=0.95,\n",
    "            repetition_penalty=1.2,\n",
    "            early_stopping=True\n",
    "        )\n",
    "    \n",
    "    # Decode the output\n",
    "    predicted_text = tokenizer.decode(outputs[0], skip_special_tokens=True)\n",
    "    \n",
    "    # Extract the disease name using the same function as in evaluation\n",
    "    response = predicted_text[len(prompt):].strip()\n",
    "    \n",
    "    # Clean up the response\n",
    "    if '\\n' in response:\n",
    "        response = response.split('\\n')[0].strip()\n",
    "    if '.' in response:\n",
    "        response = response.split('.')[0].strip()\n",
    "    \n",
    "    # Direct matching\n",
    "    for disease in unique_diseases:\n",
    "        if disease.lower() in response.lower():\n",
    "            return disease, response\n",
    "    \n",
    "    # Fuzzy matching\n",
    "    best_match = None\n",
    "    highest_similarity = 0\n",
    "    \n",
    "    for disease in unique_diseases:\n",
    "        similarity = difflib.SequenceMatcher(None, response.lower(), disease.lower()).ratio()\n",
    "        if similarity > highest_similarity and similarity > 0.6:\n",
    "            highest_similarity = similarity\n",
    "            best_match = disease\n",
    "    \n",
    "    if best_match:\n",
    "        return best_match, response\n",
    "    \n",
    "    return \"No specific disease detected\", response\n",
    "\n",
    "# Create the Gradio interface\n",
    "def gradio_interface(symptoms):\n",
    "    disease, raw_output = predict_disease(symptoms)\n",
    "    confidence = \"High\" if disease in unique_diseases else \"Low\"\n",
    "    return disease, confidence, raw_output\n",
    "\n",
    "# Create the demo\n",
    "demo = gr.Interface(\n",
    "    fn=gradio_interface,\n",
    "    inputs=gr.Textbox(lines=5, placeholder=\"Enter symptoms separated by semicolons (e.g., itching; skin rash; high fever)\"),\n",
    "    outputs=[\n",
    "        gr.Textbox(label=\"Predicted Disease\"),\n",
    "        gr.Textbox(label=\"Confidence\"),\n",
    "        gr.Textbox(label=\"Raw Model Output\")\n",
    "    ],\n",
    "    title=\"Medical Diagnosis Assistant\",\n",
    "    description=\"Enter patient symptoms to get a potential diagnosis. This is a demo and should not replace professional medical advice.\",\n",
    "    theme=\"huggingface\",\n",
    "    examples=[\n",
    "        [\"itching; skin rash; nodal skin eruptions\"],\n",
    "        [\"continuous sneezing; shivering; chills; watering from eyes\"],\n",
    "        [\"stomach pain; acidity; ulcers on tongue; vomiting; cough; chest pain\"]\n",
    "    ]\n",
    ")\n",
    "\n",
    "demo.launch(share=True) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "execution_state": "idle",
   "id": "4e898e9e-ba02-48d7-9b64-3032aa8605cb",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                           "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Subset 1 (20% of data): Train Acc: 0.8750, Val Acc: 0.8361\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                           "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Subset 2 (40% of data): Train Acc: 0.8969, Val Acc: 0.8525\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                           "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Subset 3 (60% of data): Train Acc: 0.8828, Val Acc: 0.8361\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                           "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Subset 4 (80% of data): Train Acc: 0.8866, Val Acc: 0.8361\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                             "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Subset 5 (100% of data): Train Acc: 0.8807, Val Acc: 0.8361\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": []
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# For already trained model\n",
    "train_subsets = []\n",
    "subset_sizes = [0.2, 0.4, 0.6, 0.8, 1.0]  # Different fractions of training data\n",
    "\n",
    "for i, size in enumerate(subset_sizes):\n",
    "    # Sample a subset of the training data\n",
    "    n_samples = int(len(train_df) * size)\n",
    "    train_subset = train_df.sample(n_samples, random_state=42)\n",
    "    \n",
    "    # Evaluate on this subset and validation data\n",
    "    train_preds = evaluate_dataset(model_finetuned, tokenizer, train_subset)\n",
    "    train_acc = accuracy_score(train_subset['disease'], train_preds)\n",
    "    train_accuracies.append(train_acc)\n",
    "    \n",
    "    val_preds = evaluate_dataset(model_finetuned, tokenizer, val_df)\n",
    "    val_acc = accuracy_score(val_df['disease'], val_preds)\n",
    "    val_accuracies.append(val_acc)\n",
    "    \n",
    "    print(f\"Subset {i+1} ({size*100:.0f}% of data): Train Acc: {train_acc:.4f}, Val Acc: {val_acc:.4f}\")\n",
    "\n",
    "# Create a learning curve based on dataset size\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.plot([s*len(train_df) for s in subset_sizes], train_accuracies, 'b-o', label='Training Accuracy')\n",
    "plt.plot([s*len(train_df) for s in subset_sizes], val_accuracies, 'r-o', label='Validation Accuracy')\n",
    "plt.title('Learning Curve by Dataset Size')\n",
    "plt.xlabel('Number of Training Examples')\n",
    "plt.ylabel('Accuracy')\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.savefig('learning_curve_by_size.png')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "execution_state": "idle",
   "id": "b9db27ba-b1df-4b6b-b1c8-e8833d66669e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x700 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "%matplotlib inline\n",
    "\n",
    "# Training loss values from step 10 to 900\n",
    "steps = list(range(10, 910, 10))  # Steps from 10 to 900 in increments of 10\n",
    "\n",
    "# Loss values\n",
    "losses = [3.729800, 3.586300, 3.213900, 2.921400, 2.306200, 1.840300, 1.547700, 1.506600, 1.335000, \n",
    "          1.253100, 1.186300, 1.178300, 1.046600, 1.045800, 0.992400, 0.903000, 0.916500, 0.854800, \n",
    "          0.851500, 0.812300, 0.750700, 0.708300, 0.687300, 0.676700, 0.650400, 0.618400, 0.635000, \n",
    "          0.535700, 0.572600, 0.510100, 0.499600, 0.488000, 0.493100, 0.470800, 0.454000, 0.412800, \n",
    "          0.437000, 0.398300, 0.412500, 0.387300, 0.418100, 0.366900, 0.393500, 0.338600, 0.347100, \n",
    "          0.359900, 0.365600, 0.323200, 0.312300, 0.341900, 0.300900, 0.313800, 0.326900, 0.300100, \n",
    "          0.284800, 0.301200, 0.287700, 0.286600, 0.290700, 0.292900, 0.282100, 0.271100, 0.274900, \n",
    "          0.283200, 0.265800, 0.279000, 0.261100, 0.262200, 0.265400, 0.266900, 0.256900, 0.299500, \n",
    "          0.254800, 0.256300, 0.244000, 0.247800, 0.258800, 0.255000, 0.243800, 0.255500, 0.256700, \n",
    "          0.242600, 0.247100, 0.268000, 0.247900, 0.251200, 0.236900, 0.244700, 0.260000, 0.243200]\n",
    "\n",
    "# Create the plot\n",
    "plt.figure(figsize=(12, 7))\n",
    "\n",
    "# Create main plot\n",
    "plt.plot(steps, losses, 'b-', linewidth=2, marker='o', markersize=4)\n",
    "\n",
    "\n",
    "\n",
    "# Main plot formatting\n",
    "plt.title('Full Training Loss Over 900 Steps', fontsize=18)\n",
    "plt.xlabel('Training Step', fontsize=14)\n",
    "plt.ylabel('Loss', fontsize=14)\n",
    "plt.grid(True, alpha=0.3)\n",
    "\n",
    "\n",
    "\n",
    "# Add a detailed view of the later training stages\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('full_training_loss_curve.png', dpi=300)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "execution_state": "idle",
   "id": "28eade97-bef2-4669-97cc-d5efb2c12945",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "from sklearn.metrics import roc_curve, auc\n",
    "from sklearn.preprocessing import label_binarize\n",
    "%matplotlib inline\n",
    "\n",
    "# This is a simplified example for a few diseases\n",
    "# You'll need to adapt this with your actual model prediction probabilities\n",
    "\n",
    "# Create sample data - in reality, you would use your model's actual probabilities\n",
    "# Assuming we're looking at 5 common diseases in your dataset\n",
    "diseases = ['Hepatitis B', 'Pneumonia', 'Dengue', 'Typhoid', 'Malaria']\n",
    "n_diseases = len(diseases)\n",
    "\n",
    "# Sample size\n",
    "n_samples = 61  # Your validation set size\n",
    "\n",
    "# Create mock probability data - replace with your actual model probabilities\n",
    "# This would normally come from model.predict_proba() or similar\n",
    "np.random.seed(42)  # For reproducibility\n",
    "y_score = np.random.rand(n_samples, n_diseases)  # Random probabilities between 0-1\n",
    "\n",
    "# Create mock true labels (one-hot encoded)\n",
    "# In reality, this would be your actual ground truth labels\n",
    "y_true = np.zeros((n_samples, n_diseases))\n",
    "for i in range(n_samples):\n",
    "    true_class = np.random.randint(0, n_diseases)  # Random class for this example\n",
    "    y_true[i, true_class] = 1\n",
    "\n",
    "# Compute ROC curve and ROC area for each disease\n",
    "fpr = dict()\n",
    "tpr = dict()\n",
    "roc_auc = dict()\n",
    "\n",
    "plt.figure(figsize=(10, 8))\n",
    "\n",
    "for i in range(n_diseases):\n",
    "    fpr[i], tpr[i], _ = roc_curve(y_true[:, i], y_score[:, i])\n",
    "    roc_auc[i] = auc(fpr[i], tpr[i])\n",
    "    \n",
    "    # Plot ROC curves\n",
    "    plt.plot(fpr[i], tpr[i], lw=2,\n",
    "             label=f'{diseases[i]} (AUC = {roc_auc[i]:.2f})')\n",
    "\n",
    "# Plot diagonal\n",
    "plt.plot([0, 1], [0, 1], 'k--', lw=2)\n",
    "\n",
    "# Set plot details\n",
    "plt.xlim([0.0, 1.0])\n",
    "plt.ylim([0.0, 1.05])\n",
    "plt.xlabel('False Positive Rate', fontsize=14)\n",
    "plt.ylabel('True Positive Rate', fontsize=14)\n",
    "plt.title('ROC Curves for Top Diseases', fontsize=16)\n",
    "plt.legend(loc=\"lower right\", fontsize=12)\n",
    "plt.grid(alpha=0.3)\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('roc_curve.png')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "02d2391a-85ca-4cf5-9ad3-a4a0ce1e6c75",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
